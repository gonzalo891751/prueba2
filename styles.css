// Obtener referencias a elementos del DOM
const expenseForm = document.getElementById('expense-form');
const expensesTableBody = document.querySelector('#expenses-table tbody');
const expensesChartCtx = document.getElementById('expensesChart').getContext('2d');
const downloadExcelBtn = document.getElementById('download-excel');

// Array para almacenar los gastos
let expenses = [];

// Al inicio, cargar los gastos desde localStorage si existen
if (localStorage.getItem('expenses')) {
    expenses = JSON.parse(localStorage.getItem('expenses'));
}

// Función para renderizar la tabla de gastos
function renderExpenses() {
    // Limpiar la tabla
    expensesTableBody.innerHTML = '';

    expenses.forEach((expense, index) => {
        const tr = document.createElement('tr');

        tr.innerHTML = `
            <td data-label="Fecha">${expense.fecha}</td>
            <td data-label="Nombre del Gasto">${expense.nombre}</td>
            <td data-label="Gasto">${expense.gasto.toFixed(2)}</td>
            <td data-label="Moneda">${expense.moneda}</td>
            <td data-label="Cuotas">${expense.cuota}</td>
            <td data-label="Tarjeta">${expense.tarjeta}</td>
            <td data-label="Acciones" class="actions">
                <button onclick="deleteExpense(${index})"><i class="fa fa-trash"></i></button>
            </td>
        `;
        expensesTableBody.appendChild(tr);
    });

    // Guardar en localStorage
    localStorage.setItem('expenses', JSON.stringify(expenses));

    updateChart();
}

// Función para agregar un nuevo gasto
expenseForm.addEventListener('submit', function(e) {
    e.preventDefault();

    const fecha = document.getElementById('fecha').value;
    const nombre = document.getElementById('nombre').value;
    const gasto = parseFloat(document.getElementById('gasto').value);
    const moneda = document.getElementById('moneda').value;
    const cuota = parseInt(document.getElementById('cuota').value);
    const tarjeta = document.getElementById('tarjeta').value;

    const newExpense = { fecha, nombre, gasto, moneda, cuota, tarjeta };
    expenses.push(newExpense);

    // Limpiar el formulario
    expenseForm.reset();

    renderExpenses();
});

// Función para eliminar un gasto
function deleteExpense(index) {
    if (confirm('¿Estás seguro de que deseas eliminar este gasto?')) {
        expenses.splice(index, 1);
        renderExpenses();
    }
}

// Función para actualizar el gráfico
let expensesChart;

function updateChart() {
    // Agrupar gastos por tarjeta y moneda
    const gastosPorTarjeta = {};

    expenses.forEach(expense => {
        const key = `${expense.tarjeta} (${expense.moneda})`;
        gastosPorTarjeta[key] = (gastosPorTarjeta[key] || 0) + expense.gasto;
    });

    const labels = Object.keys(gastosPorTarjeta);
    const data = Object.values(gastosPorTarjeta);

    if (expensesChart) {
        expensesChart.destroy();
    }

    expensesChart = new Chart(expensesChartCtx, {
        type: 'pie',
        data: {
            labels: labels,
            datasets: [{
                label: 'Gastos por Tarjeta',
                data: data,
                backgroundColor: generateColors(labels.length),
                hoverOffset: 4
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: {
                    position: 'bottom',
                },
                title: {
                    display: true,
                    text: 'Distribución de Gastos por Tarjeta de Crédito'
                }
            }
        }
    });
}

// Función para generar colores aleatorios para el gráfico
function generateColors(num) {
    const colors = [];
    const predefinedColors = [
        '#FF6384', '#36A2EB', '#FFCE56',
        '#8BC34A', '#FF9800', '#9C27B0',
        '#00BCD4', '#E91E63', '#3F51B5',
        '#CDDC39', '#FF5722', '#607D8B'
    ];
    for (let i = 0; i < num; i++) {
        colors.push(predefinedColors[i % predefinedColors.length]);
    }
    return colors;
}

// Función para descargar la tabla como Excel
downloadExcelBtn.addEventListener('click', function() {
    // Crear una nueva hoja de trabajo
    const wb = XLSX.utils.book_new();
    const ws_data = [
        ["Fecha", "Nombre del Gasto", "Gasto", "Moneda", "Cuotas", "Tarjeta"]
    ];

    expenses.forEach(expense => {
        ws_data.push([
            expense.fecha,
            expense.nombre,
            expense.gasto,
            expense.moneda,
            expense.cuota,
            expense.tarjeta
        ]);
    });

    const ws = XLSX.utils.aoa_to_sheet(ws_data);
    XLSX.utils.book_append_sheet(wb, ws, "Gastos");

    // Generar y descargar el archivo
    XLSX.writeFile(wb, "Registro_de_Gastos.xlsx");
});

// Inicializar la tabla y el gráfico al cargar la página
renderExpenses();
